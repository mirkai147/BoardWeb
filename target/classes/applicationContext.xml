<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
            
            <context:component-scan base-package="com.springbook.biz" >
            </context:component-scan>
             
            <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
            
            <context:property-placeholder location="classpath:config/database.properties" />
            <!-- DataSource 설정 -->
            <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
            	<property name="driverClassName" value="${jdbc.driver}" />
            	<property name="url" value="${jdbc.url}" />
            	<property name="username" value="${jdbc.username}" />
            	<property name="password" value="${jdbc.password}" />
            </bean>
            
            <!-- Spring JDBC 설정 -->
            <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
            	<property name="dataSource" ref="dataSource" />
            </bean>
            
            <!-- Transaction 설정 -->
            <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            	<property name="dataSource" ref="dataSource"></property>
            </bean>
            
            <tx:advice id="txAdvice" transaction-manager="txManager">
            	<tx:attributes>
            		<tx:method name="get*" read-only="true"/>
            		<tx:method name="*"/>
            	</tx:attributes>
            </tx:advice>
            
            <aop:config>
            	<aop:pointcut expression="execution(* com.springbook.biz..*(..))" id="txPointcut"/>
            	<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
            </aop:config>
            
            <!-- 
            <bean id="log" class="com.springbook.biz.common.Log4jAdvice"></bean>
            
            <aop:config>
            	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
            	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/>
            	<aop:aspect ref="log">
            		<aop:after method="printLogging" pointcut-ref="getPointcut"/>
            	</aop:aspect>
            </aop:config>
             -->
            <!-- 
            <bean id="before" class="com.springbook.biz.common.BeforeAdvice"></bean>
            
            <aop:config>
            	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
            	<aop:aspect ref="before">
            		<aop:before method="beforeLog" pointcut-ref="allPointcut"/>
            	</aop:aspect>
            </aop:config>
             -->
			<!-- 
            <bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"></bean>
            
            <aop:config>
            	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/>
            	<aop:aspect ref="afterReturning">
            		<aop:after-returning method="afterLog" pointcut-ref="getPointcut" returning="returnObj" />
            	</aop:aspect>
            </aop:config> 
			 -->
  			<!--  
            <bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"></bean>
            <bean id="after" class="com.springbook.biz.common.AfterAdvice"></bean>
            
            <aop:config>
            	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
            	<aop:aspect ref="afterThrowing">
            		<aop:after-throwing method="exceptionLog" pointcut-ref="allPointcut" throwing="exceptObj"/>
            	</aop:aspect>
            	
            	<aop:aspect ref="after">
            		<aop:after method="finallyLog" pointcut-ref="allPointcut" />
            	</aop:aspect>
            </aop:config> 
             -->
            <!--  
            <bean id="around" class="com.springbook.biz.common.AroundAdvice"></bean>
            
            <aop:config>
            	<aop:pointcut expression="execution(* com.springbook.biz..*Imple.*(..))" id="allPointcut"/>
            	<aop:aspect ref="around">
            		<aop:around method="aroundLog" pointcut-ref="allPointcut" />
            	</aop:aspect>                    
            </aop:config>
 			     -->       
              
              
              
              
              
           <!--  
            <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
            	<property name="userDAO" ref="userDAO" />
            </bean>

			<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO" />
			 -->
			
	<!-- <bean> 등록하지 않고 자동으로 생성하기 위함. -->
	<!-- <context:component-scan base-package="polymorphism" /> -->

<!-- List 타입 매핑 -->
	<!-- <bean id="collectionBean"
		class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<list>
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 행당동</value>
			</list>
		</property>
	</bean> -->

<!-- Set 타입 매핑 -->
	<!-- <bean id="collectionBean"
		class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<set value-type="java.lang.String">
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 성수동</value>
				<value>서울시 성동구 성수동</value>
			</set>
		</property>
	</bean> -->
	
<!-- Map 타입 매핑 -->
	<!-- <bean id="collectionBean"
		class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<map>
				<entry>
					<key><value>고길동</value></key>
					<value>서울시 강남구 역삼동</value>
				</entry>
				<entry>
					<key><value>마이콜</value></key>
					<value>서울시 강서구 화곡동</value>
				</entry>
			</map>
		</property>
	</bean> -->

<!-- Properties 타입 매핑 -->
	<!-- <bean id="collectionBean"
		class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<props>
				<prop key="고길동">서울시 강남구 역삼동</prop>
				<prop key="마이콜">서울시 강서구 화곡동</prop>
			</props>
		</property>
	</bean> -->

	<!-- <bean id="tv" class="polymorphism.LgTV"></bean> -->
	
<!-- 	<bean id="sony" class="polymorphism.SonySpeaker"></bean> -->
	
<!-- 	<bean id="apple" class="polymorphism.AppleSpeaker"></bean> -->
<!-- 	<bean id="tv" class="polymorphism.SamsungTV"></bean> -->
	
<!-- <bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod" lazy-init="true" scope="singleton"> -->
<!-- <bean id="tv" class="polymorphism.SamsungTV"
	p:speaker-ref="sony" p:price="2700000" /> -->

<!-- 	<property name="speaker" ref="apple"></property>
	<property name="price" value="2700000"></property> -->

<!-- <constructor-arg ref="sony"></constructor-arg> -->
<!-- <constructor-arg ref="apple"></constructor-arg> -->
<!-- <constructor-arg value="2700000"></constructor-arg> -->
<!-- <bean id="sony" class="polymorphism.SonySpeaker"></bean> -->
<!-- <bean id="apple" class="polymorphism.AppleSpeaker"></bean> -->

	<!-- <context:component-scan base-package="polymorphism" />
	<bean class="polymorphism.SonySpeaker"></bean> -->

</beans>
